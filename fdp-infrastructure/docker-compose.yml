version: "3.1"

networks:
  fdp-net:
    driver: bridge

volumes:
  prometheus_data: {}
  grafana_data: {}

services:

  prometheus:
    image: prom/prometheus:v2.14.0
    container_name: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - fdp-net
    labels:
      org.label-schema.group: "monitoring"

  grafana:
    image: grafana/grafana:6.5.2
    container_name: grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
    environment:
      GF_SECURITY_ADMIN_USER: "${ADMIN_USER:-admin}"
      GF_SECURITY_ADMIN_PASSWORD: "${ADMIN_PASSWORD:-admin}"
      GF_USERS_ALLOW_SIGN_UP: "false"
    restart: unless-stopped
    networks:
      - fdp-net
    labels:
      org.label-schema.group: "monitoring"

  zookeeper:
    image: confluentinc/cp-zookeeper:5.3.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: unless-stopped
    networks:
      - fdp-net
    labels:
      org.label-schema.group: "kafka"

  kafka-server:
    image: confluentinc/cp-enterprise-kafka:5.3.1
    hostname: kafka-server
    container_name: kafka-server
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
      - "7071:7071"
    volumes:
      - ./kafka/:/etc/prometheus/
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-server:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka-server:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      KAFKA_OPTS: "-javaagent:/etc/prometheus/jmx_prometheus_javaagent-0.12.0.jar=7071:/etc/prometheus/kafka-2_0_0.yml"
      KAFKA_LOG4J_ROOT_LOGLEVEL: 'ERROR'
      KAFKA_TOOLS_LOG4J_LOGLEVEL: 'ERROR'
    restart: unless-stopped
    networks:
      - fdp-net
    labels:
      org.label-schema.group: "kafka"

#  kafka-schema-registry:
#    image: confluentinc/cp-schema-registry:5.3.1
#    hostname: kafka-schema-registry
#    container_name: kafka-schema-registry
#    depends_on:
#      - zookeeper
#      - kafka-server
#    ports:
#      - "8081:8081"
#    environment:
#      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
#      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
#    restart: unless-stopped
#    networks:
#      - fdp-net
#    labels:
#      org.label-schema.group: "kafka"

#  kafka-connect:
#    image: cnfldemos/kafka-connect-datagen:0.1.3-5.3.1
#    hostname: kafka-connect
#    container_name: kafka-connect
#    depends_on:
#      - zookeeper
#      - kafka-server
#      - kafka-schema-registry
#    ports:
#      - "8083:8083"
#    environment:
#      CONNECT_BOOTSTRAP_SERVERS: 'kafka-server:29092'
#      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
#      CONNECT_REST_PORT: 8083
#      CONNECT_GROUP_ID: compose-connect-group
#      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
#      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
#      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
#      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
#      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
#      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
#      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
#      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
#      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
#      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://kafka-schema-registry:8081
#      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
#      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
#      CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
#      # CLASSPATH required due to CC-2422
#      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-5.3.1.jar
#      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
#      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
#      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
#      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
#    restart: unless-stopped
#    networks:
#      - fdp-net
#    labels:
#      org.label-schema.group: "kafka"

  kafka-control-center:
    image: confluentinc/cp-enterprise-control-center:5.3.1
    hostname: kafka-control-center
    container_name: kafka-control-center
    depends_on:
      - zookeeper
      - kafka-server
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka-server:29092'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONTROL_CENTER_CONNECT_CLUSTER: 'kafka-connect:8083'
#      CONTROL_CENTER_KSQL_URL: "http://ksql-server:8088"
#      CONTROL_CENTER_KSQL_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://kafka-schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
      CONTROL_CENTER_LOG4J_ROOT_LOGLEVEL: 'ERROR'
      CONTROL_CENTER_TOOLS_LOG4J_LOGLEVEL: 'ERROR'
    restart: unless-stopped
    networks:
      - fdp-net
    labels:
      org.label-schema.group: "kafka"

  spark-master:
    image: bde2020/spark-master:2.4.4-hadoop2.7
    hostname: spark-master
    container_name: spark-master
    ports:
      - "8088:8080"
      - "7077:7077"
    volumes:
      - ./spark/metrics.properties:/spark/conf/metrics.properties
      - $CODE_BASE_DIR/shared:/shared
    environment:
      INIT_DAEMON_STEP: setup_spark
    restart: unless-stopped
    networks:
      - fdp-net
    labels:
      org.label-schema.group: "spark"

  spark-worker_1:
    image: bde2020/spark-worker:2.4.4-hadoop2.7
    hostname: spark-worker-1
    container_name: spark-worker-1
    volumes:
      - $CODE_BASE_DIR/shared:/shared
    depends_on:
      - spark-master
    ports:
      - "8881:8081"
    environment:
      SPARK_MASTER: 'spark://spark-master:7077'
    restart: unless-stopped
    networks:
      - fdp-net
    labels:
      org.label-schema.group: "spark"

  spark-worker_2:
    image: bde2020/spark-worker:2.4.4-hadoop2.7
    hostname: spark-worker-2
    container_name: spark-worker-2
    volumes:
      - $CODE_BASE_DIR/shared:/shared
    depends_on:
      - spark-master
    ports:
      - "8882:8081"
    environment:
      SPARK_MASTER: 'spark://spark-master:7077'
    restart: unless-stopped
    networks:
      - fdp-net
    labels:
      org.label-schema.group: "spark"

  spark-worker_3:
    image: bde2020/spark-worker:2.4.4-hadoop2.7
    hostname: spark-worker-3
    container_name: spark-worker-3
    volumes:
      - $CODE_BASE_DIR/shared:/shared
    depends_on:
      - spark-master
    ports:
      - "8883:8081"
    environment:
      SPARK_MASTER: 'spark://spark-master:7077'
    restart: unless-stopped
    networks:
      - fdp-net
    labels:
      org.label-schema.group: "spark"

  graphite-exporter:
    image: prom/graphite-exporter:v0.6.2
    command: "--graphite.mapping-config=/tmp/graphite_mapping.conf"
    hostname: graphite-exporter
    container_name: graphite-exporter
    volumes:
      - ./spark/graphite_mapping.conf:/tmp/graphite_mapping.conf
    ports:
      - "9108:9108"
      - "9109:9109"
      - "9109:9109/udp"
    restart: unless-stopped
    networks:
      - fdp-net
    labels:
      org.label-schema.group: "spark"

